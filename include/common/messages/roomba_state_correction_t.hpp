/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __roomba_state_correction_t_hpp__
#define __roomba_state_correction_t_hpp__

#include <vector>
#include "roomba_state_t.hpp"


class roomba_state_correction_t
{
    public:
        int8_t     roomba_id;

        int8_t     num_corrections;

        std::vector< roomba_state_t > future_pos_estimates;

        std::vector< std::vector< float > > future_state_distribution;

        std::vector< std::vector< float > > future_heading_distribution;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~roomba_state_correction_t() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "roomba_state_correction_t"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr *p);
};

int roomba_state_correction_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int roomba_state_correction_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int roomba_state_correction_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t roomba_state_correction_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* roomba_state_correction_t::getTypeName()
{
    return "roomba_state_correction_t";
}

int roomba_state_correction_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->roomba_id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_corrections, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        tlen = this->future_pos_estimates[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->future_state_distribution[a0][0], 576);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->future_heading_distribution[a0][0], 576);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int roomba_state_correction_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->roomba_id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_corrections, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->future_pos_estimates.resize(this->num_corrections);
    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        tlen = this->future_pos_estimates[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    this->future_state_distribution.resize(this->num_corrections);
    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        if(576 > 0) {
            this->future_state_distribution[a0].resize(576);
            tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->future_state_distribution[a0][0], 576);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    this->future_heading_distribution.resize(this->num_corrections);
    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        if(576 > 0) {
            this->future_heading_distribution[a0].resize(576);
            tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->future_heading_distribution[a0][0], 576);
            if(tlen < 0) return tlen; else pos += tlen;
        }
    }

    return pos;
}

int roomba_state_correction_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num_corrections; a0++) {
        enc_size += this->future_pos_estimates[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->num_corrections * __float_encoded_array_size(NULL, 576);
    enc_size += this->num_corrections * __float_encoded_array_size(NULL, 576);
    return enc_size;
}

uint64_t roomba_state_correction_t::_computeHash(const __zcm_hash_ptr *p)
{
    const __zcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == roomba_state_correction_t::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)roomba_state_correction_t::getHash };

    uint64_t hash = (uint64_t)0xe1904db5dd9063b3LL +
         roomba_state_t::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
